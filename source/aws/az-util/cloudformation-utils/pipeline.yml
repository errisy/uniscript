# this will download the lambda.zip from S3 and install it to target
trigger:
  branches:
    include:
    - dev/*
    - main
    - master
    - prod/*
  paths:
    include:
    - 'cloudformation-utils/*'

variables:
- template: /environments.yml
- name: project
  value: 'cloudformation-utils'

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    rm -rf $(project)/src
    rm -rf $(project)/dist
    mkdir $(project)/dist
    mkdir $(project)/src
    cp $(project)/cloudformation.yml $(project)/dist/cloudformation.yml
    cp $(project)/dist/cloudformation.yml $(project)/dist/cloudformation.$(Version).$(Build.BuildId).yml
    cp $(project)/*.py $(project)/src/
  displayName: Delete and Copy Files, Create File Versions
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(project)/src/'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(project)/dist/lambda.zip'
    replaceExistingArchive: true
- task: S3Upload@1
  displayName: Upload all files to stacks folder in S3
  inputs:
    awsCredentials: '$(AWSAccountId)'
    regionName: '$(AWSRegion)'
    bucketName: '$(AWSAccountId)-$(AWSRegion)-stacks'
    sourceFolder: '$(project)/dist'
    globExpressions: '**'
    targetFolder: '$(Application)/$(EnvironmentTarget)/$(Version)/$(project)/$(Build.BuildId)'
    createBucket: true
- task: LambdaInvokeFunction@1
  continueOnError: true
  displayName: Check the state of CloudFormation
  inputs:
    awsCredentials: '$(AWSAccountId)'
    regionName: '$(AWSRegion)'
    functionName: '$(AzureUtil)--aws-devops-helper'
    payload: |
      {
        "name": "$(Application)--$(project)--$(AWSRegion)",
        "query": "CloudFormationState"
      }
    outputVariable: 'ShouldDeleteStack'
- task: CloudFormationDeleteStack@1
  continueOnError: true
  displayName: Delete the CloudFormation when necessary
  condition: eq(variables.ShouldDeleteStack , '"true"')
  inputs:
    awsCredentials: '$(AWSAccountId)'
    regionName: '$(AWSRegion)'
    stackName: '$(Application)--$(project)--$(AWSRegion)'
- task: CloudFormationCreateOrUpdateStack@1
  displayName: Run the CloudFormation Create/Update
  inputs:
    awsCredentials: '$(AWSAccountId)'
    regionName: '$(AWSRegion)'
    stackName: '$(Application)--$(project)--$(AWSRegion)'
    templateSource: 's3'
    s3BucketName: '$(AWSAccountId)-$(AWSRegion)-stacks'
    s3ObjectKey: '$(Application)/$(EnvironmentTarget)/$(Version)/$(project)/$(Build.BuildId)/cloudformation.yml'
    templateParametersSource: 'inline'
    templateParameters: |
      [
        {"ParameterKey":"AWSAccountId", "ParameterValue":"$(AWSAccountId)"},
        {"ParameterKey":"AWSRegion", "ParameterValue":"$(AWSRegion)"},
        {"ParameterKey":"Application", "ParameterValue":"$(Application)"},
        {"ParameterKey":"Version", "ParameterValue":"$(Version)"},
        {"ParameterKey":"Project", "ParameterValue":"$(project)"},
        {"ParameterKey":"EnvironmentTarget", "ParameterValue":"$(EnvironmentTarget)"},
        {"ParameterKey":"Runtime", "ParameterValue":"$(LambdaRuntimePython)"},
        {"ParameterKey":"BuildId", "ParameterValue":"$(Build.BuildId)"},
        {"ParameterKey":"AzureUtil", "ParameterValue":"$(AzureUtil)"}
      ]
    capabilityAutoExpand: true

